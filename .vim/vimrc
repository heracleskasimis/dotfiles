set nocompatible
set shellslash
set runtimepath^=~/.vim

set nobackup
set noswapfile

set backspace=indent,eol,start
set history=50
set ruler
set showcmd
set incsearch
set encoding=utf-8
set guioptions=ae
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab
set tw=0
set breakindent
set mouse=ar
set novisualbell
set vb t_vb=
set noerrorbells
set noequalalways

set langmap=ΑA,ΒB,ΨC,ΔD,ΕE,ΦF,ΓG,ΗH,ΙI,ΞJ,ΚK,ΛL,ΜM,ΝN,ΟO,ΠP,ΡR,ΣS,ΤT,ΘU,ΩV,ΧX,ΖY,ΥZ,αa,βb,ψc,δd,εe,φf,γg,ηh,ιi,ξj,κk,λl,μm,νn,οo,πp,qq,ρr,σs,τt,θu,ωv,ςw,χx,ζz,υy

set nonumber relativenumber
set hidden
set ignorecase
set smartcase
set tagcase=match
set ai nocin nosi inde=-1
set foldlevelstart=16

set clipboard=unnamedplus

set wildignore=*.class,*.o,*.meta,*.dll,*.pdb,*.exe,*.asset,*.unity,*.prefab,*.min.js,*.min.css,tags,node_modules,bin,obj,build,dist

set tags=tags;

filetype off

let &background=empty($BACKGROUND) ? 'light' : $BACKGROUND
colorscheme cyan

let g:no_plugin_maps = 1

call plug#begin('~/.vim/plugged')
Plug 'justinmk/vim-sneak'
Plug 'w0rp/ale'
Plug 'pangloss/vim-javascript'
Plug 'scrooloose/nerdtree'
Plug 'sbl/scvim'
Plug 'digitaltoad/vim-jade'
Plug 'plasticboy/vim-markdown'
Plug 'mxw/vim-jsx'
Plug 'tpope/vim-fugitive'
Plug 'elzr/vim-json'
Plug 'vim-scripts/javacomplete'
Plug 'christoomey/vim-tmux-navigator'
Plug 'fidian/hexmode'
Plug 'tpope/vim-vinegar'
Plug 'groenewege/vim-less'
Plug 'fatih/vim-go'
Plug 'editorconfig/editorconfig-vim'
Plug 'Chiel92/vim-autoformat'
Plug 'gerw/vim-HiLinkTrace'
Plug 'tfnico/vim-gradle'
Plug 'rbgrouleff/bclose.vim'
Plug 'prettier/vim-prettier'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-speeddating'
Plug 'vim-scripts/SyntaxRange'
Plug 'jceb/vim-orgmode'
Plug 'mileszs/ack.vim'
Plug 'airblade/vim-rooter'
Plug 'ludovicchabant/vim-gutentags'
Plug 'jkerian/HiCursorWords'
Plug 'vim-scripts/indentpython.vim'
Plug 'nvie/vim-flake8'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'psf/black'
Plug 'tpope/vim-dadbod'
Plug 'mtth/scratch.vim'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-eunuch'
Plug 'sunaku/vim-shortcut'
Plug 'tpope/vim-dotenv'
Plug 'junegunn/vim-peekaboo'
Plug 'jamessan/vim-gnupg'
call plug#end()

if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

if !has("gui_running")
  let loaded_matchparen = 1
endif

set wildmenu

function! HumanSize(bytes) abort
  let l:bytes = a:bytes
  if l:bytes < 0
    return '-'
  endif
  let l:sizes = ['B', 'KiB', 'MiB', 'GiB']
  let l:i = 0
  while l:bytes >= 1024
    let l:bytes = l:bytes / 1024.0
    let l:i += 1
  endwhile
  return printf('%.1f%s', l:bytes, l:sizes[l:i])
endfunction

function! CreateStatuslineColorLabel(label) abort
  let l:win = winnr()
  let l:label = ''
  let l:label .= '%9*%{winnr()!=' . l:win . '?" ".' . a:label . '." ":""}'
  let l:label .= '%3*%{winnr()==' . l:win . '&&mode()=~"^[n]"?" ".' . a:label . '." ":""}'
  let l:label .= '%1*%{winnr()==' . l:win . '&&mode()=~"^[it]"?" ".' . a:label . '." ":""}'
  let l:label .= '%2*%{winnr()==' . l:win . '&&mode()=~"^[r!]"?" ".' . a:label . '." ":""}'
  let l:label .= '%4*%{winnr()==' . l:win . '&&mode()=~"^[vc]"?" ".' . a:label . '." ":""}'
  return l:label
endfunction

function! GetBufferLabel() abort
  let l:label = expand('%:t')
  if l:label == ''
    let l:label = &buftype
  endif
  if l:label == ''
    let l:label = bufnr('%')
  endif
  return l:label
endfunction

function! CreateStatusline() abort
  let l:statusline = ''
  let l:statusline .= CreateStatuslineColorLabel('" ".GetBufferLabel().(&modified?"+":"")')
  let l:statusline .= '%0* %Y '
  let l:statusline .= '%<%{exists("w:quickfix_title")?w:quickfix_title:expand("%:p")} '
  let l:statusline .= '%= '
  let l:statusline .= '%{&fileencoding ? &fileencoding : &encoding} | '
  let l:statusline .= '%{&fileformat} | '
  let l:statusline .= '%{HumanSize(getfsize(expand("%:p")))} | '
  let l:statusline .= '%p%% '
  let l:statusline .= CreateStatuslineColorLabel('line(".").":".col(".")')
  return l:statusline
endfunction

set laststatus=2
set statusline=%!CreateStatusline()
set guitablabel=%{FindRootDirectory()!=''?fnamemodify(FindRootDirectory(),':p:h:t').'/':expand('%:t')}

set fillchars=fold:-,diff:-,vert:│

filetype plugin indent on

command! -nargs=0 FormatJSON %!python -m json.tool
command! -nargs=0 FormatHTML %!tidy -q -i --show-errors 0
command! -nargs=0 FormatXML  %!tidy -q -i --show-errors 0 -xml

function! s:Ctags(name)
  let ctaglist = []
  for entry in taglist('^'.a:name)
    call add(ctaglist, { 'pattern':  entry['cmd'], 'filename': entry['filename'] })
  endfor
  call setqflist(ctaglist)
  copen
endfunction
command! -nargs=1 Ctags call s:Ctags(<f-args>)

let c_space_errors = 1
let java_space_errors = 1
let ruby_space_errors = 1
let javascript_space_errors = 1

if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --vimgrep --hidden --skip-vcs-ignores --ignore .git -g ""'
  let g:ackprg = 'ag --vimgrep --hidden --ignore .git'
endif
let g:fzf_layout = { 'down': '40%' }
let g:ack_qhandler = "copen 10"
let g:jsx_ext_required = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_json_syntax_conceal = 0
let g:HiCursorWords_delay = 333
let g:HiCursorWords_hiGroupRegexp = ''
let g:HiCursorWords_debugEchoHiName = 0
let g:HiCursorWords_linkStyle = 'VisualNOS'
let g:NERDTreeHijackNetrw = 0
let g:NERDTreeAutoCenter = 0
let g:NERDTreeHighlightCursorline = 0
let g:NERDTreeStatusline = -1
let g:NERDTreeWinSize = 48
let g:formatprg_args_c = "--style=java"
let g:formatprg_args_cpp = "--style=java"
let g:formatprg_args_expr_javascript = '"-a -f - -".(&expandtab ? "s ".&shiftwidth : "t").(&textwidth ? " -w ".&textwidth : "")'
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
let g:rooter_manual_only = 1
let g:rooter_patterns = ['.git', '.git/', '.svn/']
let g:gutentags_project_root = ['.gitignore', '.git', '.hg', '.bzr', '_darcs', '_darcs', '_FOSSIL_', '.fslckout']
let g:gutentags_cache_dir = '~/.cache/tags'
let g:ale_lint_on_text_changed = 'always'
let g:ale_set_highlights = 0
let g:ale_lint_delay = 333
let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'javascript': ['eslint'],
  \ 'javascript.jsx': ['eslint'],
  \ 'python': ['isort', 'autopep8', 'black'],
  \ 'sql': ['pgformatter']
  \ }
let g:ale_linters = {
  \ 'javascript': ['eslint'],
  \ 'javascript.jsx': ['eslint'],
  \ 'python': ['flake8'],
  \ 'sql': ['sqllint']
  \ }
let g:ale_sql_pgformatter_options = '--spaces 2 --function-case 1 --comma-break'

let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

function! s:mod(n,m)
  return ((a:n % a:m) + a:m) % a:m
endfunction

function! s:GetWorkspaceBuffers(...)
  let sorted = get(a:, 1, 0)
  let formatted = get(a:, 2, 0)
  let buffers = gettabvar(tabpagenr(), 'buffers')
  let bufnumbers = sort(map(keys(buffers), {v -> str2nr(v:val)}), 'n')
  let bufnumbers = filter(bufnumbers, {v -> buflisted(v:val) && getbufvar(v:val, '&filetype') != 'qf'})
  let bufnumbers = sorted ? sort(bufnumbers, {a, b -> buffers[a] < buffers[b] ? 1 : -1}) : bufnumbers
  return formatted ? map(bufnumbers, {v -> fzf#vim#_format_buffer(v:val)}) : bufnumbers
endfunction

function! s:PreviousEditedWorkspaceBuffer()
  let buffers = filter(s:GetWorkspaceBuffers(1), {v -> v:val != bufnr() && bufname(v:val) !~ '^!' && getbufvar(v:val, '&filetype') != 'fugitive'})
  if len(buffers) > 0
    execute ':buffer ' .  buffers[0]
  endif
endfunction
command! PreviousEditedWorkspaceBuffer call s:PreviousEditedWorkspaceBuffer()

function! s:NextWorkspaceBuffer()
  let buffers = s:GetWorkspaceBuffers()
  execute ':buffer ' . buffers[s:mod((index(buffers, bufnr()) + 1), len(buffers))]
endfunction
command! NextWorkspaceBuffer call s:NextWorkspaceBuffer()

function! s:PreviousWorkspaceBuffer()
  let buffers = s:GetWorkspaceBuffers()
  execute ':buffer ' . buffers[s:mod((index(buffers, bufnr()) - 1), len(buffers))]
endfunction
command! PreviousWorkspaceBuffer call s:PreviousWorkspaceBuffer()

function! s:WorkspaceAttachBuffer(...)
  let buffernr = a:0 == 0 ? bufnr() : str2nr(a:1)
  let buffers = extend(gettabvar(tabpagenr(), 'buffers', {}), { buffernr: localtime() })
  call settabvar(tabpagenr(), 'buffers', buffers)
endfunction
command! -nargs=? WorkspaceAttachBuffer call s:WorkspaceAttachBuffer(<args>)

function! s:WorkspaceDetachBuffer(...)
  let buffernr = a:0 == 0 ? bufnr() : str2nr(a:1)
  silent! call remove(gettabvar(tabpagenr(), 'buffers'), buffernr)
endfunction
command! -nargs=? WorkspaceDetachBuffer call s:WorkspaceDetachBuffer(<args>)

function! s:WorkspaceBuffers(...)
  call fzf#vim#buffers('', { 'source': s:GetWorkspaceBuffers(1, 1) })
endfunction
command! WorkspaceBuffers call s:WorkspaceBuffers()

function! VimrcShortcuts()
  map <space> <leader>
  map <space>m <localleader>
  map <space><space> <leader><leader>
  map <leader><esc> <Nop>

  Shortcut 'Run shortcut'
    \ map <leader> :Shortcuts<cr><leader>

  Shortcut 'Commands'
    \ map <leader>: :Commands<cr>

  Shortcut 'New tab'
    \ map <leader><Tab>n :tabe<cr>
  Shortcut 'Delete tab'
    \ map <leader><Tab>d :tabclose<cr>
  Shortcut 'Previous tab'
    \ map <leader><Tab>[ :tabprevious<cr>
  Shortcut 'Next tab'
    \ map <leader><Tab>] :tabnext<cr>
  Shortcut 'Switch to tab 1'
    \ map <leader><Tab>1 1gt<cr>
  Shortcut 'Switch to tab 2'
    \ map <leader><Tab>2 2gt<cr>
  Shortcut 'Switch to tab 3'
    \ map <leader><Tab>3 3gt<cr>
  Shortcut 'Switch to tab 4'
    \ map <leader><Tab>4 4gt<cr>
  Shortcut 'Switch to tab 5'
    \ map <leader><Tab>5 5gt<cr>
  Shortcut 'Switch to tab 6'
    \ map <leader><Tab>6 6gt<cr>
  Shortcut 'Switch to tab 7'
    \ map <leader><Tab>7 7gt<cr>
  map <leader><Tab><esc> <Nop>

  map <m-8> 8gt<cr>
  map <m-9> 9gt<cr>
  map <m-1> 1gt<cr>
  map <m-2> 2gt<cr>
  map <m-3> 3gt<cr>
  map <m-4> 4gt<cr>
  map <m-5> 5gt<cr>
  map <m-6> 6gt<cr>
  map <m-7> 7gt<cr>
  map <m-8> 8gt<cr>
  map <m-9> 9gt<cr>

  Shortcut 'Project sidebar'
    \ map <leader>op :NERDTreeToggle <c-r>=FindRootDirectory()<cr><cr>
  Shortcut 'Find file in project sidebar'
    \ map <leader>oP :NERDTreeFind<cr>
  Shortcut 'Terminal'
    \ map <leader>ot :belowright 10split \| lcd <c-r>=FindRootDirectory()<cr> \| terminal ++curwin<cr>
  Shortcut 'Terminal here'
    \ map <leader>oT :belowright 10split \| lcd <c-r>=expand('%:p:h')<cr> \| terminal ++curwin<cr>
  map <leader>o<esc> <Nop>

  Shortcut 'Switch workspace buffer'
    \ map <leader>, :WorkspaceBuffers<cr>
  Shortcut 'Switch workspace buffer'
    \ map <leader>bb :WorkspaceBuffers<cr>
  Shortcut 'Switch buffer'
    \ map <leader>bB :Buffers<cr>
  Shortcut 'Switch workspace buffer'
    \ map <leader>b, :WorkspaceBuffers<cr>
  Shortcut 'Next buffer'
    \ map <leader>b] :NextWorkspaceBuffer<cr>
  Shortcut 'Next buffer'
    \ map <leader>bn :NextWorkspaceBuffer<cr>
  Shortcut 'Previous buffer'
    \ map <leader>b[ :PreviousWorkspaceBuffer<cr>
  Shortcut 'Previous buffer'
    \ map <leader>bp :PreviousWorkspaceBuffer<cr>
  Shortcut 'Kill buffer'
    \ map <leader>bk :Bclose<cr>
  Shortcut 'New empty buffer'
    \ map <leader>bN :vnew<cr>
  Shortcut 'Kill other buffers'
    \ map <leader>bo :%bd\|e#\|bd#<cr>
  Shortcut 'Switch buffer'
    \ map <leader>< :Buffers<cr>
  map <leader>b<esc> <Nop>

  Shortcut 'Previously edited buffer'
    \ map <bs> :PreviousEditedWorkspaceBuffer<cr>

  Shortcut 'Pop up scratch buffer'
    \ map <leader>bx :Scratch<cr>
  Shortcut 'Pop up scratch buffer'
    \ map <leader>x :Scratch<cr>

  Shortcut 'Jump to definition'
    \ map <leader>cd :Tags '<c-r>=expand("<cword>")<cr><cr>
  Shortcut 'List errors'
    \ map <leader>cx :lopen<cr>
  Shortcut 'Compile'
    \ map <leader>cc :make<cr>
  Shortcut 'Format buffer/region'
    \ map <leader>cf :ALEFix<cr>
  map <leader>c<esc> <Nop>

  Shortcut 'Window movement'
    \ map <leader>w <c-w>
  Shortcut 'Next tab'
    \ map <c-Tab> gt
  Shortcut 'Previous tab'
    \ map <c-s-Tab> gT

  Shortcut 'Find file'
    \ map <leader>. :Files <c-r>=FindRootDirectory()<cr>/<cr>

  Shortcut 'Find file from here'
    \ map <leader>f/ :Files <c-r>=expand('%:p:h')<cr>/<cr>
  Shortcut 'Find file from here'
    \ map <leader>ff :Files <c-r>=expand('%:p:h')<cr>/<cr>
  Shortcut 'Find file'
    \ map <leader>f. :Files <c-r>=FindRootDirectory()<cr><cr>
  Shortcut 'Delete this file'
    \ map <leader>fX :Remove<cr>
  Shortcut 'Move file'
    \ map <leader>fm :Move <c-r>=expand('%:p')<cr>
  Shortcut 'Open project editorconfig'
    \ map <leader>fc :e <c-r>=FindRootDirectory()<cr>/.editorconfig<cr>
  Shortcut 'Recent files'
    \ map <leader>fr :History<cr>
  Shortcut 'Find file in private configuration'
    \ map <leader>fp :Files <c-r>=expand('$HOME')<cr>/.vim/<cr>
  Shortcut 'Yank filename'
    \ map <leader>fy :let @+ = expand('%:p')<cr>
  map <leader>f<esc> <Nop>

  Shortcut 'Find file in project'
    \ map <leader>p/ :GFiles <c-r>=FindRootDirectory()<cr><cr>
  map <leader>p<esc> <Nop>

  Shortcut 'Find file in project'
    \ map <leader><leader> :GFiles <c-r>=FindRootDirectory()<cr><cr>

  Shortcut 'Search for symbol in project'
    \ map <leader>* :Ack! <c-r>=expand("<cword>")<cr> <c-r>=FindRootDirectory()<cr><cr>
  Shortcut 'Search project'
    \ map <leader>/p :Ack! <c-r>=expand("<cword>")<cr> <c-r>=FindRootDirectory()<cr><c-b><s-right><s-right>
  Shortcut 'Search current directory'
    \ map <leader>/d :Ack! <c-r>=expand("<cword>")<cr> %:h<c-b><s-right><s-right>
  Shortcut 'Search buffer'
    \ map <leader>/b :Ack! <c-r>=expand("<cword>")<cr> %<c-b><s-right><s-right>
  Shortcut 'Search symbol'
    \ map <leader>/i :Ctags <c-r>=expand("<cword>")<cr>
  Shortcut 'Search git commits'
    \ map <leader>/g :Glog! -S<c-r>=expand("<cword>")<cr> -- \| copen<s-left><s-left><s-left><left>
  Shortcut 'Search git file commits'
    \ map <leader>/G :0Glog! -S<c-r>=expand("<cword>")<cr> -- \| copen<s-left><s-left><s-left><left>
  Shortcut 'Quicklist replace'
    \ map <leader>/: :cdo s/\(\<<c-r>=expand("<cword>")<cr>\>\)//g \| update<s-left><s-left><left><left><left>
  map <leader>/<esc> <Nop>

  Shortcut 'Git status'
    \ map <leader>gg :aboveleft Gstatus<cr>
  Shortcut 'Git blame'
    \ map <leader>gB :Git blame<cr>
  Shortcut 'List git commits'
    \ map <leader>gl :Commits<cr>
  Shortcut 'List git file commits'
    \ map <leader>gL :BCommits<cr>
  Shortcut 'Git stage file'
    \ map <leader>gS :Git add %<cr>
  Shortcut 'Git unstage file'
    \ map <leader>gU :Git reset HEAD %<cr>
  Shortcut 'Git revert file'
    \ map <leader>gR :Git chekout -- %<cr>
  Shortcut 'Git fetch'
    \ map <leader>gF :Git fetch<cr>
  Shortcut 'Git remove file'
    \ map <leader>gx :Gremove %<cr>
  map <leader>g<esc> <Nop>

  Shortcut 'List commands'
    \ map <leader>hf :Helptags<cr>
  Shortcut 'Vim info'
    \ map <leader>hi :help<cr>
  map <leader>h<esc> <Nop>

  nmap <esc><esc> :noh<cr>
  map <down> gj
  map <up> gk
  imap <down> <c-o>gj
  imap <up> <c-o>gk

  tmap <s-insert> <c-w>"*
  cmap <c-g> <c-[>

  map f <Plug>Sneak_f
  map F <Plug>Sneak_F
  map t <Plug>Sneak_t
  map T <Plug>Sneak_T

  nmap <X1Mouse> <c-o>
  nmap <X2Mouse> <c-i>
  nmap <RightMouse> <LeftMouse>/\<<c-r>=expand("<cword>")<cr>\><cr>
endfunction

augroup workspace
  autocmd!
  autocmd BufWinEnter * WorkspaceAttachBuffer 
  autocmd BufDelete * WorkspaceDetachBuffer expand('<abuf>') 
augroup END

augroup shortcuts
  autocmd!
  autocmd VimEnter * call VimrcShortcuts()
augroup END

augroup termesc
  autocmd!
  autocmd TerminalOpen * silent tnoremap <buffer> <esc><esc> <c-\><c-n>
  autocmd TerminalOpen * silent tnoremap <buffer> <c-h> <c-w>h
  autocmd TerminalOpen * silent tnoremap <buffer> <c-j> <c-w>j
  autocmd TerminalOpen * silent tnoremap <buffer> <c-k> <c-w>k
  autocmd TerminalOpen * silent tnoremap <buffer> <c-l> <c-w>l
  autocmd FileType fzf silent tunmap <buffer> <esc><esc>
  autocmd FileType fzf silent tunmap <buffer> <c-h>
  autocmd FileType fzf silent tunmap <buffer> <c-j>
  autocmd FileType fzf silent tunmap <buffer> <c-k>
  autocmd FileType fzf silent tunmap <buffer> <c-l>
augroup END

augroup fzf
  autocmd!
  autocmd FileType fzf set laststatus=0 noshowmode noruler
    \ | autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END

augroup chdir
  autocmd!
  autocmd BufEnter * if &ft !~ '^nerdtree$' | silent! lcd %:p:h | endif
augroup END

augroup quickfix
  autocmd!
  autocmd Filetype qf setlocal statusline=%!CreateStatusline()
augroup END

augroup keywordhelp
  autocmd!
  autocmd FileType vim setlocal keywordprg=:help
  autocmd FileType python setlocal keywordprg=pydoc
augroup END

augroup codeeval
  autocmd!
  autocmd FileType * silent Dotenv
  autocmd FileType sql Shortcut 'Evaluate buffer/region'
    \ vmap <leader>ce :DB $DB_URI<cr>
  autocmd FileType sql Shortcut 'Evaluate buffer/region'
    \ nmap <leader>ce :DB $DB_URI < %
  autocmd FileType javascript Shortcut 'Evaluate buffer/region'
    \ vmap <leader>ce :<c-u>belowright '<,'>term node<cr>
  autocmd FileType javascript Shortcut 'Evaluate buffer/region'
    \ nmap <leader>ce :<c-u>belowright term node %
  autocmd FileType python Shortcut 'Evaluate buffer/region'
    \ vmap <leader>ce :<c-u>belowright '<,'>term python<cr>
  autocmd FileType python Shortcut 'Evaluate buffer/region'
    \ nmap <leader>ce :<c-u>belowright term python %
  autocmd FileType sh Shortcut 'Evaluate buffer/region'
    \ vmap <leader>ce :<c-u>belowright '<,'>term sh<cr>
  autocmd FileType sh Shortcut 'Evaluate buffer/region'
    \ nmap <leader>ce :<c-u>belowright term %
  autocmd FileType vim Shortcut 'Evaluate buffer/region'
    \ vmap <leader>ce y:@"<cr>
  autocmd FileType vim Shortcut 'Evaluate buffer/region'
    \ nmap <leader>ce source %
augroup END
