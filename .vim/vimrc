set nocompatible
set shellslash
set runtimepath^=~/.vim

set backspace=indent,eol,start
set history=50
set ruler
set showcmd
set incsearch
set encoding=utf-8
set guioptions=a
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab
set mouse=a
set novisualbell
set vb t_vb=
set noerrorbells

set langmap=ΑA,ΒB,ΨC,ΔD,ΕE,ΦF,ΓG,ΗH,ΙI,ΞJ,ΚK,ΛL,ΜM,ΝN,ΟO,ΠP,ΡR,ΣS,ΤT,ΘU,ΩV,ΧX,ΖY,ΥZ,αa,βb,ψc,δd,εe,φf,γg,ηh,ιi,ξj,κk,λl,μm,νn,οo,πp,qq,ρr,σs,τt,θu,ωv,ςw,χx,ζz,υy

set number
set hidden
set ignorecase
set smartcase
set tagcase=match
set ai nocin nosi inde=-1
set foldlevelstart=16

set clipboard=unnamed

set wildignore=*.class,*.o,*.meta,*.dll,*.pdb,*.exe,*.asset,*.unity,*.prefab,*.min.js,*.min.css,tags,node_modules,bin,obj,build,dist

set tags=tags;

filetype off

let &background=empty($BACKGROUND) ? 'light' : $BACKGROUND

colorscheme cyan

let g:no_plugin_maps = 1

call plug#begin('~/.vim/plugged')
Plug 'justinmk/vim-sneak'
Plug 'w0rp/ale'
Plug 'pangloss/vim-javascript'
Plug 'scrooloose/nerdtree'
Plug 'sbl/scvim'
Plug 'digitaltoad/vim-jade'
Plug 'plasticboy/vim-markdown'
Plug 'mxw/vim-jsx'
Plug 'tpope/vim-fugitive'
Plug 'gregsexton/gitv'
Plug 'elzr/vim-json'
Plug 'vim-scripts/javacomplete'
Plug 'christoomey/vim-tmux-navigator'
Plug 'fidian/hexmode'
Plug 'tpope/vim-vinegar'
Plug 'groenewege/vim-less'
Plug 'fatih/vim-go'
Plug 'editorconfig/editorconfig-vim'
Plug 'Chiel92/vim-autoformat'
Plug 'gerw/vim-HiLinkTrace'
Plug 'tfnico/vim-gradle'
Plug 'rbgrouleff/bclose.vim'
Plug 'prettier/vim-prettier'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-speeddating'
Plug 'vim-scripts/SyntaxRange'
Plug 'jceb/vim-orgmode'
Plug 'mileszs/ack.vim'
Plug 'airblade/vim-rooter'
Plug 'ludovicchabant/vim-gutentags'
Plug 'jkerian/HiCursorWords'
Plug 'vim-scripts/indentpython.vim'
Plug 'nvie/vim-flake8'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'ambv/black'
Plug 'tpope/vim-dadbod'
Plug 'mtth/scratch.vim'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-eunuch'
Plug 'sunaku/vim-shortcut'
Plug 'tpope/vim-dotenv'
call plug#end()

if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

if !has("gui_running")
  let loaded_matchparen = 1
endif

set wildmenu
set laststatus=2
set statusline=
set statusline+=%F
set statusline+=%m
set statusline+=%=
set statusline+=%y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c

set fillchars=vert:│,stl:-,stlnc:-,fold:-,diff:-

filetype plugin indent on

command! -nargs=0 FormatJSON %!python -m json.tool
command! -nargs=0 FormatHTML %!tidy -q -i --show-errors 0
command! -nargs=0 FormatXML  %!tidy -q -i --show-errors 0 -xml

command! -nargs=1 Ctags call s:Ctags(<f-args>)
function! s:Ctags(name)
  let ctaglist = []
  for entry in taglist('^'.a:name)
    call add(ctaglist, { 'pattern':  entry['cmd'], 'filename': entry['filename'] })
  endfor
  call setqflist(ctaglist)
  copen
endfunction

let c_space_errors = 1
let java_space_errors = 1
let ruby_space_errors = 1
let javascript_space_errors = 1

if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --vimgrep --hidden --ignore .git -g ""'
  let g:ackprg = 'ag --vimgrep --hidden'
endif
let g:ack_qhandler = "copen 10"
let g:jsx_ext_required = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_json_syntax_conceal = 0
let g:HiCursorWords_delay = 333
let g:HiCursorWords_hiGroupRegexp = ''
let g:HiCursorWords_debugEchoHiName = 0
let g:HiCursorWords_linkStyle = 'VisualNOS'
let g:NERDTreeHijackNetrw = 0
let g:NERDTreeAutoCenter = 0
let g:NERDTreeHighlightCursorline = 0
let g:formatprg_args_c = "--style=java"
let g:formatprg_args_cpp = "--style=java"
let g:formatprg_args_expr_javascript = '"-a -f - -".(&expandtab ? "s ".&shiftwidth : "t").(&textwidth ? " -w ".&textwidth : "")'
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
let g:Gitv_TruncateCommitSubjects = 1
let g:Gitv_DoNotMapCtrlKey = 1
let g:rooter_manual_only = 1
let g:rooter_patterns = ['.git', '.gitignore', '.git/', '.svn/']
let g:gutentags_project_root = ['.gitignore', '.git', '.hg', '.bzr', '_darcs', '_darcs', '_FOSSIL_', '.fslckout']
let g:gutentags_cache_dir = '~/.cache/tags'
let g:ale_lint_on_text_changed = 'never'
let g:ale_set_highlights = 0
let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'javascript': ['eslint'],
  \ 'python': ['autopep8', 'black']
  \ }

let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

function! VimrcShortcuts()
  map <space> <leader>
  map <space><space> <leader><leader>
  map <leader><esc> <Nop>

  Shortcut 'Run shortcut'
    \ map <leader> :Shortcuts<cr><leader>

  Shortcut 'New tab'
    \ map <leader><Tab>n :tabe<cr>
  Shortcut 'Delete tab'
    \ map <leader><Tab>d :tabclose<cr>
  Shortcut 'Previous tab'
    \ map <leader><Tab>[ :tabprevious<cr>
  Shortcut 'Next tab'
    \ map <leader><Tab>] :tabnext<cr>
  Shortcut 'Switch to tab 1'
    \ map <leader><Tab>1 1gt<cr>
  Shortcut 'Switch to tab 2'
    \ map <leader><Tab>2 2gt<cr>
  Shortcut 'Switch to tab 3'
    \ map <leader><Tab>3 3gt<cr>
  Shortcut 'Switch to tab 4'
    \ map <leader><Tab>4 4gt<cr>
  Shortcut 'Switch to tab 5'
    \ map <leader><Tab>5 5gt<cr>
  Shortcut 'Switch to tab 6'
    \ map <leader><Tab>6 6gt<cr>
  Shortcut 'Switch to tab 7'
    \ map <leader><Tab>7 7gt<cr>
  Shortcut 'Switch to tab 8'
    \ map <leader><Tab>8 8gt<cr>
  Shortcut 'Switch to tab 9'
    \ map <leader><Tab>9 9gt<cr>
  map <leader><Tab><esc> <Nop>

  Shortcut 'Project sidebar'
    \ map <leader>op :NERDTreeToggle <c-r>=FindRootDirectory()<cr><cr>
  Shortcut 'Find file in project sidebar'
    \ map <leader>oP :NERDTreeFind<cr>
  Shortcut 'Terminal'
    \ map <leader>ot :belowright 10split \| lcd <c-r>=FindRootDirectory()<cr> \| terminal ++curwin<cr>
  Shortcut 'Terminal here'
    \ map <leader>oT :belowright 10split \| lcd <c-r>=expand('%:p:h')<cr> \| terminal ++curwin<cr>
  map <leader>o<esc> <Nop>

  Shortcut 'Switch buffer'
    \ map <leader>, :Buffers<cr>
  Shortcut 'Switch buffer'
    \ map <leader>bb :Buffers<cr>
  Shortcut 'Switch buffer'
    \ map <leader>b, :Buffers<cr>
  Shortcut 'Next buffer'
    \ map <leader>b] :bnext<cr>
  Shortcut 'Next buffer'
    \ map <leader>bn :bnext<cr>
  Shortcut 'Previous buffer'
    \ map <leader>b[ :bprevious<cr>
  Shortcut 'Previous buffer'
    \ map <leader>bp :bprevious<cr>
  Shortcut 'Kill buffer'
    \ map <leader>bk :Bclose<cr>
  Shortcut 'New empty buffer'
    \ map <leader>bN :vnew<cr>
  Shortcut 'Switch buffer'
    \ map <leader>< :Buffers<cr>
  map <leader>b<esc> <Nop>

  Shortcut 'Previously edited buffer'
    \ map <bs> <c-^>

  Shortcut 'Pop up scratch buffer'
    \ map <leader>bx :Scratch<cr>
  Shortcut 'Pop up scratch buffer'
    \ map <leader>x :Scratch<cr>

  Shortcut 'Jump to definition'
    \ map <leader>cd :Tags '<c-r>=expand("<cword>")<cr><cr>
  Shortcut 'List errors'
    \ map <leader>cx :lopen<cr>
  Shortcut 'Compile'
    \ map <leader>cc :make<cr>
  Shortcut 'Format buffer/region'
    \ map <leader>cf :ALEFix<cr>
  map <leader>c<esc> <Nop>

  Shortcut 'Window
    \ movement' map <leader>w <c-w>
  Shortcut 'Next tab'
    \ map <c-Tab> gt

  Shortcut 'Find file'
    \ map <leader>. :Files <c-r>=expand('%:p:h')<cr>/<cr>

  Shortcut 'Find file from here'
    \ map <leader>f/ :Files <c-r>=expand('%:p:h')<cr>/<cr>
  Shortcut 'Find file from here'
    \ map <leader>ff :Files <c-r>=expand('%:p:h')<cr>/<cr>
  Shortcut 'Find file'
    \ map <leader>f. :Files <c-r>=FindRootDirectory()<cr><cr>
  Shortcut 'Delete this file'
    \ map <leader>fX :Remove<cr>
  Shortcut 'Move file'
    \ map <leader>fm :Move <c-r>=expand('%:p')<cr>
  Shortcut 'Open project editorconfig'
    \ map <leader>fc :e <c-r>=FindRootDirectory()<cr>/.editorconfig<cr>
  Shortcut 'Recent files'
    \ map <leader>fr :History<cr>
  Shortcut 'Yank filename'
    \ map <leader>fy :let @+ = expand('%:p')<cr>
  map <leader>f<esc> <Nop>

  Shortcut 'Find file in project'
    \ map <leader>p/ :GFiles <c-r>=FindRootDirectory()<cr><cr>
  map <leader>p<esc> <Nop>

  Shortcut 'Find file in project'
    \ map <leader><leader> :GFiles <c-r>=FindRootDirectory()<cr><cr>

  Shortcut 'Search for symbol in project'
    \ map <leader>* :Ack! <c-r>=expand("<cword>")<cr> <c-r>=FindRootDirectory()<cr><cr>
  Shortcut 'Search project'
    \ map <leader>/p :Ack! <c-r>=expand("<cword>")<cr> <c-r>=FindRootDirectory()<cr><c-b><s-right><s-right>
  Shortcut 'Search current directory'
    \ map <leader>/d :Ack! <c-r>=expand("<cword>")<cr> %:h<c-b><s-right><s-right>
  Shortcut 'Search buffer'
    \ map <leader>/b :Ack! <c-r>=expand("<cword>")<cr> %<c-b><s-right><s-right>
  Shortcut 'Search symbol'
    \ map <leader>/i :Ctags <c-r>=expand("<cword>")<cr>
  Shortcut 'Search git'
    \ map <leader>/g :Gitv! -S <c-r>=expand("<cword>")<cr>
  Shortcut 'Quicklist replace'
    \ map <leader>/: :cdo s/\(\<<c-r>=expand("<cword>")<cr>\>\)//g \| update<s-left><s-left><left><left><left>
  map <leader>/<esc> <Nop>

  Shortcut 'Git status'
    \ map <leader>gg :Gstatus<cr>
  Shortcut 'Git blame'
    \ map <leader>gb :Gblame<cr>
  Shortcut 'List git commits'
    \ map <leader>gl :Gitv<cr>
  Shortcut 'List git file commits'
    \ map <leader>gL :Gitv!<cr>
  map <leader>g<esc> <Nop>

  Shortcut 'List commands'
    \ map <leader>hf :Helptags<cr>
  Shortcut 'Vim info'
    \ map <leader>hi :help<cr>
  map <leader>h<esc> <Nop>

  nmap <esc><esc> :noh<cr>
  map <down> gj
  map <up> gk
  imap <down> <c-o>gj
  imap <up> <c-o>gk

  " imap <insert> <esc>"*P']ji
  cmap <c-g> <c-[>

  map f <Plug>Sneak_f
  map F <Plug>Sneak_F
  map t <Plug>Sneak_t
  map T <Plug>Sneak_T

  nmap <X1Mouse> <c-o>
  nmap <X2Mouse> <c-i>
  nmap <RightMouse> <LeftMouse>/\<<c-r>=expand("<cword>")<cr>\><cr>
endfunction

augroup shortcuts
  autocmd!
  autocmd VimEnter * call VimrcShortcuts()
augroup END

augroup termesc
  autocmd!
  autocmd TerminalOpen * silent tnoremap <buffer> <esc><esc> <c-\><c-n>
  autocmd FileType fzf silent tunmap <buffer> <esc><esc>
augroup END

augroup fzf
  autocmd!
  autocmd FileType fzf set laststatus=0 noshowmode noruler
    \ | autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END

augroup codeeval
  autocmd!
  autocmd FileType * silent Dotenv
  autocmd FileType sql Shortcut 'Evaluate buffer/region'
    \ vmap <leader>ce :DB $DB_URI<cr>
  autocmd FileType sql Shortcut 'Evaluate buffer/region'
    \ nmap <leader>ce :DB $DB_URI < %
  autocmd FileType javascript Shortcut 'Evaluate buffer/region'
    \ vmap <leader>ce :<c-u>belowright '<,'>term node<cr>
  autocmd FileType javascript Shortcut 'Evaluate buffer/region'
    \ nmap <leader>ce :<c-u>belowright term node %
  autocmd FileType python Shortcut 'Evaluate buffer/region'
    \ vmap <leader>ce :<c-u>belowright '<,'>term python<cr>
  autocmd FileType python Shortcut 'Evaluate buffer/region'
    \ nmap <leader>ce :<c-u>belowright term python %
  autocmd FileType sh Shortcut 'Evaluate buffer/region'
    \ vmap <leader>ce :<c-u>belowright '<,'>term sh<cr>
  autocmd FileType sh Shortcut 'Evaluate buffer/region'
    \ nmap <leader>ce :<c-u>belowright term %
  autocmd FileType vim Shortcut 'Evaluate buffer/region'
    \ vmap <leader>ce y:@"<cr>
  autocmd FileType vim Shortcut 'Evaluate buffer/region'
    \ nmap <leader>ce source %
augroup END

augroup chdir
  autocmd BufEnter * if &ft !~ '^nerdtree$' | silent! lcd %:p:h | endif
augroup END

augroup keywordhelp
  autocmd!
  autocmd FileType vim setlocal keywordprg=:help
  autocmd FileType python setlocal keywordprg=pydoc
augroup END
