set nocompatible
set shellslash
set runtimepath^=~/.vim

let mapleader=' '

set backspace=indent,eol,start
set history=50
set ruler
set showcmd
set incsearch
set encoding=utf-8
set guioptions=a
set linespace=1
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab
set mouse=a
set novisualbell
set vb t_vb=
set noerrorbells

set langmap=ΑA,ΒB,ΨC,ΔD,ΕE,ΦF,ΓG,ΗH,ΙI,ΞJ,ΚK,ΛL,ΜM,ΝN,ΟO,ΠP,ΡR,ΣS,ΤT,ΘU,ΩV,ΧX,ΖY,ΥZ,αa,βb,ψc,δd,εe,φf,γg,ηh,ιi,ξj,κk,λl,μm,νn,οo,πp,qq,ρr,σs,τt,θu,ωv,ςw,χx,ζz,υy

set autochdir
set number "relativenumber
set hidden
set ignorecase
set smartcase
set tagcase=match
set ai nocin nosi inde=-1
set foldlevelstart=16

set clipboard=unnamed

set wildignore=*.class,*.o,*.meta,*.dll,*.pdb,*.exe,*.asset,*.unity,*.prefab,*.min.js,*.min.css,tags,node_modules,bin,obj,build,dist

set tags=tags;

filetype off

set background=light
if $BACKGROUND == 'dark'
    set background=dark
endif

colorscheme cyan

let g:no_plugin_maps = 1

call plug#begin('~/.vim/plugged')
Plug 'justinmk/vim-sneak'
Plug 'w0rp/ale'
Plug 'pangloss/vim-javascript'
Plug 'scrooloose/nerdtree'
Plug 'sbl/scvim'
Plug 'digitaltoad/vim-jade'
Plug 'plasticboy/vim-markdown'
Plug 'mxw/vim-jsx'
Plug 'tpope/vim-fugitive'
Plug 'gregsexton/gitv'
Plug 'elzr/vim-json'
Plug 'vim-scripts/javacomplete'
Plug 'christoomey/vim-tmux-navigator'
Plug 'fidian/hexmode'
Plug 'tpope/vim-vinegar'
Plug 'groenewege/vim-less'
Plug 'fatih/vim-go'
Plug 'editorconfig/editorconfig-vim'
Plug 'Chiel92/vim-autoformat'
Plug 'gerw/vim-HiLinkTrace'
Plug 'tfnico/vim-gradle'
Plug 'rbgrouleff/bclose.vim'
Plug 'prettier/vim-prettier'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-speeddating'
Plug 'vim-scripts/SyntaxRange'
Plug 'jceb/vim-orgmode'
Plug 'mileszs/ack.vim'
Plug 'airblade/vim-rooter'
Plug 'ludovicchabant/vim-gutentags'
Plug 'jkerian/HiCursorWords'
Plug 'vim-scripts/indentpython.vim'
Plug 'nvie/vim-flake8'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'ambv/black'
Plug 'tpope/vim-dadbod'
Plug 'mtth/scratch.vim'
Plug 'junegunn/fzf.vim'
call plug#end()

if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
    set noshellslash
    if has('win32')
        set shell=cmd
        set shellcmdflag=/c
        set shellxquote=\"
    endif
endif

if !has("gui_running")
    let loaded_matchparen = 1
endif

set laststatus=2
set statusline=
set statusline+=%F
set statusline+=%m
set statusline+=%=
set statusline+=%y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c

filetype plugin indent on

command! -nargs=0 FormatJSON %!python -m json.tool
command! -nargs=0 FormatHTML %!tidy -q -i --show-errors 0
command! -nargs=0 FormatXML  %!tidy -q -i --show-errors 0 -xml

command! -nargs=1 QFTag call s:QFTag(<f-args>)
function! s:QFTag(name)
  let qf_taglist = []
  for entry in taglist('^'.a:name)
    call add(qf_taglist, { 'pattern':  entry['cmd'], 'filename': entry['filename'] })
  endfor
  call setqflist(qf_taglist)
  copen
endfunction

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

let c_space_errors = 1
let java_space_errors = 1
let ruby_space_errors = 1
let javascript_space_errors = 1

let g:jsx_ext_required = 0
let g:tagbar_expand = 0
let g:tagbar_width = 34
let g:tagbar_sort = 0
let Tlist_Use_Right_Window = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Inc_Winwidth = 0
let g:solarized_termstrans = 1
let g:vim_markdown_folding_disabled = 1
let g:extradite_resize = 0
let g:vim_json_syntax_conceal = 0
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:airline_powerline_fonts=1
let g:HiCursorWords_delay = 333
let g:HiCursorWords_hiGroupRegexp = ''
let g:HiCursorWords_debugEchoHiName = 0
let g:HiCursorWords_linkStyle = 'VisualNOS'
let g:NERDTreeHijackNetrw = 0
let g:NERDTreeAutoCenter = 0
let g:NERDTreeHighlightCursorline = 1
let g:formatprg_args_c = "--style=java"
let g:formatprg_args_cpp = "--style=java"
let g:formatprg_args_expr_javascript = '"-a -f - -".(&expandtab ? "s ".&shiftwidth : "t").(&textwidth ? " -w ".&textwidth : "")'
let g:EditorConfig_core_mode = 'python_external'
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
let g:Gitv_TruncateCommitSubjects = 1
let g:Gitv_DoNotMapCtrlKey = 1
let g:rooter_manual_only = 1
let g:rooter_patterns = ['.git', '.gitignore', '.git/', '.svn/']
let g:gutentags_project_root = ['.gitignore', '.git', '.hg', '.bzr', '_darcs', '_darcs', '_FOSSIL_', '.fslckout']
let g:gutentags_cache_dir = '~/.cache/tags'
let g:ale_lint_on_text_changed = 'never'
let g:ale_set_highlights = 0

let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

let g:intelligencia = 'postgres://intelligencia@localhost/intelligencia'
let g:airflow = 'postgres://airflow@localhost/airflow'

map <leader><Tab>n :tabe<cr>
map <leader><Tab>d :tabclose<cr>
map <leader><Tab>[ :tabprevious<cr>
map <leader><Tab>] :tabnext<cr>
map <leader><Tab>1 1gt<cr>
map <leader><Tab>2 2gt<cr>
map <leader><Tab>3 3gt<cr>
map <leader><Tab>4 4gt<cr>
map <leader><Tab>5 5gt<cr>
map <leader><Tab>6 6gt<cr>
map <leader><Tab>7 7gt<cr>
map <leader><Tab>8 8gt<cr>
map <leader><Tab>9 9gt<cr>

map <leader>op :NERDTreeToggle <c-r>=FindRootDirectory()<cr><cr>
map <leader>oP :NERDTreeFind<cr>
map <leader>ot :belowright 10split \| lcd <c-r>=FindRootDirectory()<cr> \| terminal ++curwin<cr>

map <leader>bb :Buffers<cr>
map <leader>b, :Buffers<cr>
map <leader>b] :bnext<cr>
map <leader>bn :bnext<cr>
map <leader>b[ :bprevious<cr>
map <leader>bp :bprevious<cr>
map <leader>bk :Bclose<cr>
map <leader>bN :vnew<cr>
map <leader>< :Buffers<cr>
map <BS> <c-^>

map <leader>bx :Scratch<cr>
map <leader>x :Scratch<cr>

map <leader>cd :Tags '<c-r>=expand("<cword>")<cr><cr>
map <leader>cx :lopen<cr>
map <leader>cc :make<cr>

map <leader>w <c-w>
map <c-Tab> <c-w>w
map <leader>f/ :Files<cr>
map <leader>p/ :Files <c-r>=FindRootDirectory()<cr><cr>
map <leader><leader> :Files <c-r>=FindRootDirectory()<cr><cr>
map <leader>* :Ack! <c-r>=expand("<cword>")<cr> <c-r>=FindRootDirectory()<cr><cr>
map <leader>/p :Ack! <c-r>=expand("<cword>")<cr> <c-r>=FindRootDirectory()<cr><c-b><s-right><s-right>
map <leader>/d :Ack! <c-r>=expand("<cword>")<cr> <c-r>=getcwd()<cr><c-b><s-right><s-right>
map <leader>/b :Ack! <c-r>=expand("<cword>")<cr> %<c-b><s-right><s-right>
map <leader>/i :QFTag <c-r>=expand("<cword>")<cr>
map <leader>/g :Gitv! -S<c-r>=expand("<cword>")<cr>

map <leader>gg :Gstatus<cr>
map <leader>gl :Gitv<cr>
map <leader>gL :Gitv!<cr>

map <leader>hf :Helptags<cr>
map <leader>hi :help<cr>

map <down> gj
map <up> gk
imap <down> <c-o>gj
imap <up> <c-o>gk

" imap <insert> <esc>"*P']ji
cmap <c-g> <c-[>

map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

nmap <X1Mouse> <c-o>
nmap <X2Mouse> <c-i>
nmap <RightMouse> <LeftMouse>/<c-r>=expand("<cword>")<cr><cr>

augroup termesc
  autocmd!
  autocmd TerminalOpen * silent tnoremap <buffer> <esc><esc> <c-\><c-n>
  autocmd FileType fzf silent tunmap <buffer> <esc><esc>
augroup END

augroup fzf
  autocmd!
  autocmd FileType fzf set laststatus=0 noshowmode noruler
        \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END

augroup keywordhelp
  autocmd!
  autocmd FileType vim setlocal keywordprg=:help
  autocmd FileType python setlocal keywordprg=pydoc
augroup END
